@function unicode($str){
	@return unquote("\"") + $str + unquote("\"");
}

@function unicode2($str){
 @return unquote("\"")+unquote(str-insert($str, "\\", 1))+unquote("\"");
}

@function px2rem($sizeValue) {
  @return($sizeValue/ 16) + rem;
}

@function rem($sizeValue) {
  @return($sizeValue/ 16) + rem;
}



@function shade( $color, $percent ) {

  @if not _is-color($color) {
    @error "`#{$color}` is not a valid color for the `$color` argument in " +
           "the `shade` mixin.";
  } @else {
    @return mix(#000, $color, $percent);
  }
}


@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}


//////////////////////////////////////////////
/// private functions
//////////////////////////////////////////////

@function _is-color($color) {
  @return (type-of($color) == color) or ($color == "currentColor");
}


@function _assign-inputs($inputs, $pseudo: null) {

  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}